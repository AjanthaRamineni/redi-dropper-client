#!/bin/bash

# Exit cleanly on Ctrl-C
trap 'exit 1' INT

eval export HOME=~$(id -un)
REPO_DIR=$HOME/git/indera-dropper
VENV_DIR=$HOME/venv
REMOTE=asura@dropper1.ctsi.ufl.edu

echo "Using REPO_DIR: $REPO_DIR"
echo "Using VENV_DIR: $VENV_DIR"

# @TODO: check for python, pip, virtualenv
test ! -z `which virtualenv` || sudo pip install virtualenv

if [ -d $VENV_DIR ]; then
    echo "Venv folder: [$VENV_DIR] already exists."
    read -p "Do you want to continue using this venv? [y/N] " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        virtualenv $VENV_DIR
    else
        exit 1
    fi
fi

# Activate virtualenv to get Fabric module
source $VENV_DIR/bin/activate
type fab >/dev/null 2>&1 || {
    echo >&2 "fabric is not installed.";
    pip install fabric
}

# Set up PYTHONPATH for fabfile.py
export PYTHONPATH=$REPO_DIR:$PYTHONPATH

# Update local Git repository and re-exec this script if updated
SUM=$(md5sum $0)

#if (cd $REPO_DIR && git pull && git checkout develop); then
#    if [ "$SUM" != "$(md5sum $0)" ]; then
#        echo "Re-executing updated $0 script"
#        exec $0 "$@"
#    fi
#fi

# CWD to where the fabfile.py is located
cd $REPO_DIR/app/deploy

# create folders, install venv, clone repo from the given branch
fab staging bootstrap:develop

# re-check code an requirements (assumes that bootstrap was performed)
fab staging deploy:develop

# show error log from the remote server
fab staging show_config_apache
fab staging show_errors_apache
